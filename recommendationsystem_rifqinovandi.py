# -*- coding: utf-8 -*-
"""RecommendationSystem_RifqiNovandi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNGeYd7dvjw89TfGBJcYr7UV1W2mpJF_

# Recommendation System
# Rekomendasi Game dengan teknik *content-based filtering*

*Oleh: [Rifqi Novandi](https://github.com/rifqinvnd)*

## Latar Belakang
Pada proyek machine learning ini, akan dibuat model sistem rekomendasi untuk memprediksi game yang disukai berdasarkan game lain yang memiliki kesamaan serupa atau dengan menggunakan teknik *content-based filtering* dengan beberapa variabel seperti platform, tahun rilis, genre, dll.

## 1. Menginstall dan mengimpor library yang dibutuhkan
"""

# menginstall library yang dibutuhkan
!pip install -U scikit-learn

# menggunakan library os, zipfile untuk menyiapkan dataset
import os
import zipfile

# library untuk pengolahan data
import pandas as pd
import numpy as np
from collections import Counter
from sklearn.preprocessing import MinMaxScaler

# library untuk membuat model sistem rekomendasi
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_similarity

# Untuk evaluasi sistem rekomendasi
from sklearn.metrics import calinski_harabasz_score, davies_bouldin_score

"""## 2. Mempersiapkan Dataset

### 2.1 Menyiapkan userame dan key akun Kaggle
"""

# menyiapkan kredensial environment Kaggle
os.environ['KAGGLE_USERNAME'] = 'rifqinovandi'
os.environ['KAGGLE_KEY'] = '03877f2b4798e3c6def8f76fd42e3070'

"""### 2.2 Mengunduh dan mempersiapkan dataset"""

# mengunduh dataset dengan Kaggle CLI
!kaggle datasets download -d rush4ratio/video-game-sales-with-ratings

# mengekstaksi berkas zip ke CWD
files = "/content/video-game-sales-with-ratings.zip"
zip = zipfile.ZipFile(files, 'r')
zip.extractall('/content')
zip.close()

"""## 3. Pemahaman Data (*Data Understanding*)

### 3.1 Membaca data dengan pandas DataFrame
"""

df = pd.read_csv(files)
df.head()

"""## 3.2 Memahami isi keseluruhan dataset"""

# mengecek shape dari  DataFrame
df.shape

# melihat info dataset yang digunakan
df.info()

# melihat jumlah data kosong pada setiap kolom
df.isna().sum()

# mendeskripsikan setiap kolom dataset
df.describe()

"""## 4. Mempersiapkan Data (*Data Preparation*)

### 4.1 Membuang kolom yang memiliki banyak *missing-value*
"""

# membuang kolom dengan missing value yang tinggi
df.drop(['Global_Sales', 'Critic_Score', 'Critic_Count', 'User_Count'], axis=1, inplace=True)

"""### 4.2 Membersihkan data setiap kolom

#### 4.2.1 Kolom Name
"""

# mengecek missing value kolom name
df[df['Name'].isna()]

# menghapus missing-value
for index in df[df['Name'].isna()].index:
  df.drop(index, axis=0, inplace=True)

# memastikan kembali missing-value telah terhapus
if(df['Name'].isna().sum() == 0):
  print("Tidak ada data kosong pada kolom Name")
else:
  print("Terdapat data kosong pada kolom Name")

"""#### 4.2.2 Kolom Platform"""

# menggunakan collections Counter untuk mengecek jumlah setiap elemen kolom platform
platform_counter = Counter(df['Platform'])
platform_counter

# menghilangkan kolom dengan jumlah kurang dari 350
platform_less_than_350 = ['2600', '3DO', 'DC', 'GB', 'GEN', 'GG', 'N64','NES', 'NG',
                          'PCFX', 'SAT', 'SCD', 'SNES', 'TG16', 'WS', 'WiiU', 'XOne']

df = df[~df['Platform'].isin(platform_less_than_350)]

# mengecek elemen pada kolom platform
df['Platform'].unique()

"""#### 4.2.3 Kolom Genre"""

# mengecek missing value pada kolom genre
df['Genre'].isna().sum()

# mengecek elemen berbeda pada kolom genre
df['Genre'].unique()

# mengecek jumlah setiap elemen pada kolom genre
genre_counter = Counter(df['Genre'])
genre_counter

# membuang row dengan genre misc yang terlalu komplex
df = df[df['Genre'] != 'Misc']

# mengecek kembali info dataset
df.info()

"""#### 4.2.4 Kolom Publisher"""

# mengecek missing-value pada kolom publisher
df['Publisher'].isna().sum()

# membuang setiap row dengan missing value
for index in df[df['Publisher'].isna()].index:
  df.drop(index, axis=0, inplace=True)

# mengecek kembali setiap missing value pada kolom publisher telah dibuang
if(df['Publisher'].isna().sum() == 0):
  print("Tidak ada data kosong pada kolom Publisher")
else:
  print("Terdapat data kosong pada kolom Publisher")

# mengecek elemen elemen pada kolom publisher
df['Publisher'].unique()

# mengecek elemen dari unknown
df[df['Publisher'] == 'Unknown']

# membuang elemen publisher unknown
for index in df[df['Publisher'] == 'Unknown'].index:
  df.drop(index, axis=0, inplace=True)

"""#### 4.2.5 Kolom Year of Release"""

# mengecek missing value pada kolom Year of Release
df['Year_of_Release'].isna().sum()

# membuang missing value pada kolom Year of Release
for index in df[df['Year_of_Release'].isna()].index:
  df.drop(index, axis=0, inplace=True)

# memastikan missing value telah terbuang
if(df['Year_of_Release'].isna().sum() == 0):
  print("Tidak ada data kosong pada kolom Year_of_Release")
else:
  print("Terdapat data kosong pada kolom Year_of_Release")

# mengecek elemen elemen pada kolom Year of Release
df['Year_of_Release'].unique()

# mengubah type kolom menjadi string karena merupakan kategorikal
df['Year_of_Release'] = df['Year_of_Release'].astype('str')

# mengecek kembali missing value pada dataset
df.isna().sum()

"""#### 4.2.6 Kolom User Score"""

# membuang missing value pada kolom user score, developer, dan rating
for index in df[df['User_Score'].isna()].index:
  df.drop(index, axis=0, inplace=True)

for index in df[df['Developer'].isna()].index:
  df.drop(index, axis=0, inplace=True)

for index in df[df['Rating'].isna()].index:
  df.drop(index, axis=0, inplace=True)

# mengecek seluruh missing value pada dataset telah terbuang
if df.isna().sum().sum() == 0:
  print('Dataset bersih dari data kosong')
else:
  print('Masih tedapat data kosong pada dataset')

# mengecek elemen elemen pada kolom user score
df['User_Score'].unique()

# mengecek isi elemen tbd pada kolom user score
df[df['User_Score'] == 'tbd']

# membuang row dengan user score tbd
for index in df[df['User_Score'] == 'tbd'].index:
  df.drop(index, axis=0, inplace=True)

# mengubah type data user score menjadi float sebagai fitur numerikal
df['User_Score'] = df['User_Score'].astype('float')

"""#### 4.2.7 Kolom Developer"""

# mengecek jumlah elemen berbeda pada kolom developer
df['Developer'].nunique()

# karena jumlah elemen berbeda terlalu banyak dan kolom merupakan kategorikal maka kolom dibuang
df.drop('Developer', axis=1, inplace=True)

"""#### 4.2.8 Kolom Rating"""

# mengecek elemen berbeda pada kolom rating
df['Rating'].unique()

"""### 4.3 Pembersihan data duplikasi"""

df.duplicated().sum()

# mengecek kembali info dataset
df.info()

# Hasil data setelah melakukan proses cleaning
df.head()

# mendeskripsikan kembali kolom kolom numerikal
df.describe()

"""### 4.4 Menstrukturkan kembali data

#### 4.4.1 Membuat dataframe berisi nama game
"""

# menyimpan nama-nama game pada dataframe baru
df_game_name = pd.DataFrame({'Game': df['Name']}).reset_index(drop=True)
df_game_name.head()

# menggunakan kolom aplikasi sebagai index
df.set_index('Name', inplace=True)
df.head()

"""#### 4.4.2 Konversi label kategorikal dengan one-hot encoding"""

# memilih semua kolom dengan datatype object
column_object = df.dtypes[df.dtypes == 'object'].keys()
column_object

# mengonversikan data kategori ke one-hot encoding
one_hot_label = pd.get_dummies(df[column_object])
one_hot_label.head(3)

# menghapus kolom dengan type data object
df.drop(column_object,axis=1,inplace=True)
df.head()

# menyatukan data one-hot encoding dengan data keseluruhan
df = pd.concat([df,one_hot_label],axis=1)
df.head()

"""#### 4.4.3 Standarisasi kolom numerikal"""

# memilih semua kolom dengan datatype float
column_numeric = list(df.dtypes[df.dtypes == 'float64'].keys())
column_numeric

# inisiasi MinMaxScaler
scaler = MinMaxScaler()

# Standarisasi data kolom numerikal
scaled = scaler.fit_transform(df[column_numeric])

# mengganti data dengan yang telah di standarissasi
i=0
for column in column_numeric:
    df[column] = scaled[:,i]
    i += 1

# melihat hasil data setelah distandarisasi dan di one-hot encoding
df.head()

# mendeskripsikan lagi data
df.describe()

"""## 5. Membuat Model Sistem Rekomendasi *Content-based Filtering*

### 5.1 Menggunakan algoritma K-NearestNeighbors
"""

# Membuat sistem rekomendasi dengan model K-Nearest Neighbor
# Inisiasi model 
model = NearestNeighbors(metric='euclidean')

# Melakukan fitting model terhadap data
model.fit(df)

# Membuat fungsi untuk mendapatkan rekomendasi game
def GameRecommended(gamename:str, recommended_games:int=6):
  print(f'Apabila pengguna menyukai Game: \n{gamename[0]}\n5 Game berikut ini direkomendasikan untuk dimainkan:')
  # Mencari game dengan kesamaan tertinggi dengan game yang disukai pengguna
  distances, neighbors = model.kneighbors(df.loc[gamename],n_neighbors=recommended_games)
  # Memasukkan game yang direkomendasikan pada sebuah list
  similar_game = []
  for gamename in df_game_name.loc[neighbors[0][:]].values:
    similar_game.append(gamename[0])
  # Memasukan skornya (jarak) pada sebuah list
  similar_distance = []
  for distance in distances[0]:
    similar_distance.append(f"{round(100-distance, 2)}%")
  # Mengembalikan sebuah dataframe berupa rekomendasi game
  return pd.DataFrame(data = {"Nama Aplikasi" : similar_game[1:], "Tingkat Kesamaan" : similar_distance[1:]})

# Memberikan rekomendasi terhadap game yang serupa dengan game yang dipilih
GameRecommended(df_game_name.loc[111])

"""### 5.2 Menggunakan Cosine Similarity"""

# Menghitung cosine similarity dari dataframe
cosine_sim = cosine_similarity(df)

# Menyimpan hasil perhitungan pada dataframe
cosine_sim_df = pd.DataFrame(cosine_sim, index=df_game_name['Game'], columns=df_game_name['Game'])
cosine_sim_df.head(3)

# Membuat fungsi untuk mendapatkan rekomendasi dengan Cosine Similarity
def CosineGameRecommended(gamename:str, recommended_games:int=5):
  print(f'Apabila pengguna menyukai Game: \n{gamename[0]}\n5 Game berikut ini direkomendasikan untuk dimainkan:')
  # Mencari nilai unik pada game yang disukai pengguna di baris dataframe cosine sim
  # Nilai unik (arr) dikembalikan dalam bentuk yang berurutan dari kecil ke besar 
  arr, ind = np.unique(cosine_sim_df.loc[gamename[0]], return_index=True)
  # Memasukkan nama game yang serupa dari index kedua terakhir sampai index n terakhir
  similar_game = []
  for index in ind[-(recommended_games+1):-1]:
    similar_game.append(df_game_name.loc[index][0])
  # Memasukkan skor cosine dari game yang serupa mulai dari index kedua terakhir sampai index n terakhir
  cosine_score = []
  for score in arr[-(recommended_games+1):-1]:
    cosine_score.append(score)
  # Mengembalikan sebuah dataframe berupa rekomendasi terhadap game yang dipilih
  return pd.DataFrame(data = {"Nama Aplikasi" : similar_game, "Cosine Similarity" : cosine_score}).sort_values(by='Cosine Similarity',ascending=False)

# memberikan rekomendasi dengan cosine similarity pada game yang dipilih
CosineGameRecommended(df_game_name.loc[111])

"""## 6. Evaluasi Model Sistem Rekomendasi K-NearestNeighbors

### 6.1 Skor Calinski Harabasz
"""

calinski_harabasz_score(df, df_game_name).round(2)

"""### 6.2 Skor Davies Bouldin"""

davies_bouldin_score(df, df_game_name).round(2)

"""## Penutupan
Model untuk memberikan rekomendasi game dengan *content-based filtering* telah selesai dibuat. Setelah diujikan, model ini bekerja cukup baik dalam memberikan 5 rekomendasi teratas terhadap game yang mungkin disukai/dimainkan pengguna. Namun demikian, masih ada beberapa kekurangan dari model yang dibuat seperti yang terlihat pada skor Calinski Harabasz dan Davies Bouldin. Untuk memperbaikinya dapat digunakan algoritma untuk membuat model rekomendasi yang lain seperti menggunakan deep learning ataupun *collaborative filtering* lalu dibandingkan performanya dengan model KNN saat ini.

### Referensi
- Dokumentasi Scikit-learn: [https://scikit-learn.org/stable/modules/classes.html](https://scikit-learn.org/stable/modules/classes.html)
- Referensi Laporan: [Contoh Algoritma Sistem Rekomendasi dengan Dokumentasi](https://github.com/fahmij8/ML-Exercise/blob/main/MLT-2/MLT_Proyek_Submission_2.ipynb)
- Dataset: [Game Sales with Rating Dataset](https://www.kaggle.com/rush4ratio/video-game-sales-with-ratings)
"""